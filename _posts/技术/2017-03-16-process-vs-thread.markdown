---
layout: post
title: Linux中的多进程和多线程
category: 技术
author: shenbowei
tags: Linux
---

* 目录
{:toc}

## 相关概念

### 进程

UNIX标准把进程定义为：“一个其中运行着一个或者多个线程的地址空间和这些线程所需要的系统资源”。
像Linux这样的多任务操作系统可以同时运行多个程序。每个运行着的程序实例就构成一个进程。
正在运行的程序或者进程由程序代码、数据、变量（占用着系统内存）、打开的文件（文件描述符）和环境组成。
一般来说，Linux系统会在进程之间共享程序代码和系统函数库，所以在任何时刻内存中都只有代码的一份副本。

### 线程

在一个程序（进程）中的多个执行路线就叫做线程。更准确的定义是：线程是一个进程内部的一个控制序列。
虽然Linux和许多其他的操作系统一样，都擅长同时运行多个进程，但是所有程序在执行时都是作为一个单独的进程。
事实上，所有的进程都至少有一个执行线程。

### 多进程 vs 多线程

- 当进程执行`fork`调用时，将创建出该进程的一份新副本。这个新进程拥有自己的变量和`PID`，它的时间调度也是独立的，
	它的执行（通常）几乎完全独立于父进程。

- 当在进程中创建一个新线程时，新的执行线程将拥有自己的栈（因此也有自己的局部变量），
	但与它的创建者共享全局变量、文件描述符、信号处理函数和当前目录状态。

正因为如此，新线程的创建代价要比新进程小得多。但是，在调试和可靠性方面，进程要由于线程。

下面，我们通过几组实验来比较下多进程和多线程的执行效率。

## 实验

代码已经放到了`github`:[process-vs-thread](https://github.com/shenbowei/process-vs-thread "跳转")。

实验环境：

`centos`虚拟机，虚拟机内存分配为`2GB`，cpu为`Intel(R) Core(TM) i7-4710MQ CPU @ 2.50GHz`。
系统内核信息为：

```
$ cat /proc/version 
Linux version 3.10.0-327.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) #1 SMP Thu Nov 19 22:10:57 UTC 2015
```

## 实验结果

通过实验，我发现在给虚拟机分配不同数量的`cpu`核心（1个或者2个），会得到不同的实验结论。

未完待续……



> ## 参考文献
>
>[多线程 or 多进程 (转强力推荐)](http://www.cnblogs.com/eavn/archive/2010/08/28/1811381.html "跳转")
>
>[进程的堆栈空间](http://blog.csdn.net/guoping16/article/details/6579434 "跳转")
>
>[线程使用共享堆而非私有堆的原因分析](http://blog.csdn.net/yyf_it/article/details/49924157 "跳转")
>
>《Linux程序设计（第四版）》11章，12章








